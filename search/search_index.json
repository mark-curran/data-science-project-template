{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Page A placeholder index page. Subheading This is a subheading in the index page.","title":"Index Page"},{"location":"#index-page","text":"A placeholder index page.","title":"Index Page"},{"location":"#subheading","text":"This is a subheading in the index page.","title":"Subheading"},{"location":"docker_notes/","text":"Purpose This document is a brain dump on all things Docker. Topics Q: Why do we use entrypoint? We use entrypoint to pass a default command to run inside a container when we invoke docker run [OPTIONS] IMAGE [COMMAND] [ARG...] . Here is a summary of the advantages and disadvantages from the official documentation Command line arguments to docker run <image> will be appended after all elements in an exec form ENTRYPOINT, and will override all elements specified using CMD. This allows arguments to be passed to the entry point, i.e., docker run <image> -d will pass the -d argument to the entry point. You can override the ENTRYPOINT instruction using the docker run --entrypoint flag. The shell form prevents any CMD or run command line arguments from being used, but has the disadvantage that your ENTRYPOINT will be started as a subcommand of /bin/sh -c , which does not pass signals. This means that the executable will not be the container\u2019s PID 1 - and will not receive Unix signals - so your executable will not receive a SIGTERM from docker stop <container> . Only the last ENTRYPOINT instruction in the Dockerfile will have an effect. Q: Why do we ues CMD ? From official docs it sounds very similar to ENTRYPOINT . The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well. Q: What are the different types of mounts? Need to figure this one out! Q: Is is a good idea to use two different Dockerfiles depending on the ENV? From StackExchange, there are different opinion on using build args because we want the image to behave as consistently as possible. See this link On the other hand a different opinion is found here","title":"Purpose"},{"location":"docker_notes/#purpose","text":"This document is a brain dump on all things Docker.","title":"Purpose"},{"location":"docker_notes/#topics","text":"Q: Why do we use entrypoint? We use entrypoint to pass a default command to run inside a container when we invoke docker run [OPTIONS] IMAGE [COMMAND] [ARG...] . Here is a summary of the advantages and disadvantages from the official documentation Command line arguments to docker run <image> will be appended after all elements in an exec form ENTRYPOINT, and will override all elements specified using CMD. This allows arguments to be passed to the entry point, i.e., docker run <image> -d will pass the -d argument to the entry point. You can override the ENTRYPOINT instruction using the docker run --entrypoint flag. The shell form prevents any CMD or run command line arguments from being used, but has the disadvantage that your ENTRYPOINT will be started as a subcommand of /bin/sh -c , which does not pass signals. This means that the executable will not be the container\u2019s PID 1 - and will not receive Unix signals - so your executable will not receive a SIGTERM from docker stop <container> . Only the last ENTRYPOINT instruction in the Dockerfile will have an effect. Q: Why do we ues CMD ? From official docs it sounds very similar to ENTRYPOINT . The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well. Q: What are the different types of mounts? Need to figure this one out! Q: Is is a good idea to use two different Dockerfiles depending on the ENV? From StackExchange, there are different opinion on using build args because we want the image to behave as consistently as possible. See this link On the other hand a different opinion is found here","title":"Topics"},{"location":"license/","text":"License This project can be distributed under GNU GENERAL PUBLIC LICENSE Version 3. A link to the full license can be found here .","title":"License"},{"location":"license/#license","text":"This project can be distributed under GNU GENERAL PUBLIC LICENSE Version 3. A link to the full license can be found here .","title":"License"},{"location":"scratchpad/","text":"Scratchpad Document An unstructured TODO list. What needs to be documented? An overview of the project philosphy and key design decisions. An explanation of using pip install and pip freeze to modify dependencies of the various services. A skeletal getting started guide to setting up a local container with links to the official documentation. In particular, should include: How to install VSCODE plugins and enable them within the devcontainer. Add information on setting up ssh-agent or more generally, git credential manager. How to modify the shell settings, e.g., bash history, style, git completion. Features of the more fleshed out template. Tests of python code. SQL linter and RunOnSave integration. Python file formatting and style checking. mkdocs integration so you can document your project. Default Jupyter Notebook server configuration. General Reading List Things that I need to read. The Docker Networking Overview contains all things Docker networking. Docker Container Networking which explains how networks function \"from the container's point of view\". Docker and ip Tables on how Docker manages the host's ip tables. General TODO List Things that are not deployed with the app. Configure tests, provide an example test. Configure RunOnSave and SQL linter. Configure Python linting/formatting. For further down the track. A \".github\" folder. Configure a SQL manager/connector class. Reading lists Separating out dev and prod environments A reading list for separating out test and prod environments. Could try doing something with multistage builds here . Could consider using multiple Dockerfiles [here]9https://vsupalov.com/same-dockerfile-dev-staging-production/). Some warning about making dev and prod too divergent here . Another article about dev vs. prod images here . Features required for effective local development Features relating to auto completion. Search bash history using partial command then up arrow here . Auto completing git commands here A whole bunch of bash completions here Official documentation on bash auto completion here . Official documenation on bash auto completion builtin commands here . Feature relating to terminal coloring and formatting. General article on terminal coloring here . Another article on PS1 colorization here . On persisting bash history. GNU documentation on how bash history works here . VSC guidance on persisting bash history here . Code snippet on mounting the users bash history here . Misc. Useful links Setting up a container using Docker build. Note, do not use docker-compose to build the container: * Official docs here . Setting up different configurations using docker-compose depending on the context: * Official advice on using docker-compose in production * Official documentation on compose overwriting mechanism Setting up a remote container generally: * Using Git inside the container, in particular, ussing ssh-agent here * Example of a python devcontainer here . * Official vscode remote development documentation here . Specifics to mounts Google credentials: * Using local user credential when testing locally here . * Article on various tradeoffs of different IAM policies here . Information on ssh-agent and ssh-add : * Article on finding the socket of an existing ssh-agent and using it in the current shell session here .","title":"Scratchpad Document"},{"location":"scratchpad/#scratchpad-document","text":"An unstructured TODO list.","title":"Scratchpad Document"},{"location":"scratchpad/#what-needs-to-be-documented","text":"An overview of the project philosphy and key design decisions. An explanation of using pip install and pip freeze to modify dependencies of the various services. A skeletal getting started guide to setting up a local container with links to the official documentation. In particular, should include: How to install VSCODE plugins and enable them within the devcontainer. Add information on setting up ssh-agent or more generally, git credential manager. How to modify the shell settings, e.g., bash history, style, git completion. Features of the more fleshed out template. Tests of python code. SQL linter and RunOnSave integration. Python file formatting and style checking. mkdocs integration so you can document your project. Default Jupyter Notebook server configuration.","title":"What needs to be documented?"},{"location":"scratchpad/#general-reading-list","text":"Things that I need to read. The Docker Networking Overview contains all things Docker networking. Docker Container Networking which explains how networks function \"from the container's point of view\". Docker and ip Tables on how Docker manages the host's ip tables.","title":"General Reading List"},{"location":"scratchpad/#general-todo-list","text":"Things that are not deployed with the app. Configure tests, provide an example test. Configure RunOnSave and SQL linter. Configure Python linting/formatting. For further down the track. A \".github\" folder. Configure a SQL manager/connector class.","title":"General TODO List"},{"location":"scratchpad/#reading-lists","text":"","title":"Reading lists"},{"location":"scratchpad/#separating-out-dev-and-prod-environments","text":"A reading list for separating out test and prod environments. Could try doing something with multistage builds here . Could consider using multiple Dockerfiles [here]9https://vsupalov.com/same-dockerfile-dev-staging-production/). Some warning about making dev and prod too divergent here . Another article about dev vs. prod images here .","title":"Separating out dev and prod environments"},{"location":"scratchpad/#features-required-for-effective-local-development","text":"Features relating to auto completion. Search bash history using partial command then up arrow here . Auto completing git commands here A whole bunch of bash completions here Official documentation on bash auto completion here . Official documenation on bash auto completion builtin commands here . Feature relating to terminal coloring and formatting. General article on terminal coloring here . Another article on PS1 colorization here . On persisting bash history. GNU documentation on how bash history works here . VSC guidance on persisting bash history here . Code snippet on mounting the users bash history here .","title":"Features required for effective local development"},{"location":"scratchpad/#misc-useful-links","text":"Setting up a container using Docker build. Note, do not use docker-compose to build the container: * Official docs here . Setting up different configurations using docker-compose depending on the context: * Official advice on using docker-compose in production * Official documentation on compose overwriting mechanism Setting up a remote container generally: * Using Git inside the container, in particular, ussing ssh-agent here * Example of a python devcontainer here . * Official vscode remote development documentation here . Specifics to mounts Google credentials: * Using local user credential when testing locally here . * Article on various tradeoffs of different IAM policies here . Information on ssh-agent and ssh-add : * Article on finding the socket of an existing ssh-agent and using it in the current shell session here .","title":"Misc. Useful links"}]}